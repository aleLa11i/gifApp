{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifReadItems.js","components/GifRead.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","class","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","images","title","downsized_medium","GifReadItems","src","alt","GifRead","setimages","useEffect","then","gif","img","GifExpertApp","categories","setcategories","i","setKey","ReactDOM","render","document","getElementById"],"mappings":"wNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAAQ,qBAAKC,MAAM,oBAAX,SACJ,sBAAMC,SAZU,SAACC,GAEjBA,EAAEC,iBAECL,EAAWM,OAAOC,OAAO,IAExBT,GAAe,SAAAU,GAAK,OAAKR,GAAL,mBAAoBQ,OACxCP,EAAc,MAKlB,SACI,uBACAQ,KAAK,OACLC,MAAQV,EACRW,SApBkB,SAACP,GACvBH,EAAcG,EAAEQ,OAAOF,QAoBnBG,YAAY,mC,+BC5BXC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEqCC,UAAWH,GAFhD,+DAGAI,MAAQF,GAHR,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,YAAsB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,OAAOC,EAAS,EAATA,MAE9B,MAAO,CACHF,GAAKA,EACLR,IAAG,OAAGS,QAAH,IAAGA,OAAH,EAAGA,EAAQE,iBAAiBX,IAC/BU,MAAQA,MAXG,kBAiBZJ,GAjBY,4CAAH,sDCEPM,EAAe,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBE,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEnC,OACA,8BACI,qBAAKa,IAAOb,EAAOc,IAAOJ,OCArBK,EAAU,SAAC,GAAgB,IAAfjB,EAAc,EAAdA,SAGrB,EAA4BhB,mBAAS,IAArC,mBAAO2B,EAAP,KAAeO,EAAf,KAOA,OALAC,qBAAY,WACRpB,EAAQC,GACHoB,MAAM,SAAAC,GAAG,OAAIH,EAAUG,QAC7B,CAAErB,IAEG,qCACJ,oBAAIb,MAAM,eAAV,SAA6Ba,IAC7B,qBAAKb,MAAM,kBAAX,SAGYwB,EAAOF,KAAI,SAACa,GACV,OAAO,cAAC,EAAD,eAA+BA,GAAZA,EAAIZ,aCfvCa,EAAe,WAExB,MAAoCvC,mBAAS,CAAC,KAA9C,mBAAOwC,EAAP,KAAmBC,EAAnB,KAEA,OAAQ,qCACA,oBAAItC,MAAM,QAAV,4DACA,cAAE,EAAF,CAAcJ,cAAgB0C,IAC9B,uBAEKD,EAAWf,KAAI,SAACT,EAAS0B,GACpB,IAAMC,EAAM,UAAMD,EAAN,YAAW1B,GACxB,OAAO,cAAC,EAAD,CAEPA,SAAeA,GADT2B,U,YCZ3BC,IAASC,OAEL,cAAE,EAAF,IAEFC,SAASC,eAAe,W","file":"static/js/main.41ae25a2.chunk.js","sourcesContent":["import React,{ useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue]  = useState(\"\");\r\n\r\n    const handleInputChange = (e)=> {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit= (e)=> {\r\n        \r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            \r\n            setCategories( categ => [inputValue, ...categ]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (<div class=\"conteinerCategory\">\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange={ handleInputChange }\r\n            placeholder=\"Busque aqui una categoria\" \r\n            />\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    \r\n}","export const getGifs = async (category)=>{\r\n\r\n    const  url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=UdW88nito00ISgnMJgl4WF3sEoAphU9c`;\r\n    const resp = await fetch(  url   );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(({id,images,title})=>{\r\n\r\n        return {\r\n            id : id,\r\n            url : images?.downsized_medium.url,\r\n            title : title\r\n        }\r\n\r\n    })\r\n\r\n\r\n    return gifs;\r\n\r\n}  ","import React from 'react';\r\n\r\nexport const GifReadItems = ({id,title,url}) => {\r\n\r\n    return  (\r\n    <div>\r\n        <img src={  url  } alt={  title  }></img>\r\n    \r\n    </div>\r\n    )\r\n}\r\n","import React,{ useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifReadItems } from './GifReadItems';\r\n\r\n\r\nexport const GifRead = ({category}) => {\r\n\r\n\r\n    const [images, setimages] = useState([])\r\n\r\n    useEffect(  ()=>{\r\n        getGifs(category)\r\n            .then( gif => setimages(gif))       \r\n    }, [ category ]);\r\n\r\n    return (<>\r\n        <h1 class=\"categoryName\">{   category    }</h1>\r\n        <div class=\"conteinerGalery\">\r\n            \r\n                {\r\n                    images.map((img)=>{\r\n                      return <GifReadItems key={img.id} {...img}  />\r\n                    })\r\n                }   \r\n        </div>\r\n       </>\r\n    )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifRead } from \"./components/GifRead\";\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = ()=>{\r\n\r\n    const [categories, setcategories] = useState([\"\"]);\r\n\r\n    return (<>\r\n            <h2 class=\"Title\">Aplicacion de Alesandro Lalli para buscar Gifs</h2>\r\n            < AddCategory setCategories={ setcategories } />\r\n            <hr />   \r\n            {\r\n                 categories.map((category,i)=>{\r\n                      const setKey = `${i}_${category}`;\r\n                     return <GifRead \r\n                     key={ setKey }\r\n                     category = {   category    }\r\n                     />\r\n                 })\r\n            }\r\n        </>)\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport './responsive.css';\n\n\nReactDOM.render(\n  \n    < GifExpertApp /> ,\n  \n  document.getElementById('root')\n);\n\n\n\n\n"],"sourceRoot":""}